"use client";
// import type { Metadata } from "next";
import localFont from "next/font/local";
import "./globals.css";
import { Provider } from "@/components/ui/provider";
import { Cache, QueryInput, cacheExchange } from "@urql/exchange-graphcache";
import { createClient, fetchExchange, Provider as UrqlPropvider } from "urql";
import { GetUserDocument, GetUserQuery, LogOutMutation } from "@/gql/graphql";
const geistSans = localFont({
  src: "./fonts/GeistVF.woff",
  variable: "--font-geist-sans",
  weight: "100 900",
});
const geistMono = localFont({
  src: "./fonts/GeistMonoVF.woff",
  variable: "--font-geist-mono",
  weight: "100 900",
});

// export const metadata: Metadata = {
//   title: "Create Next App",
//   description: "Generated by create next app",
// };

function betterUpdateQuery<Result, Query>(
  cache: Cache,
  qi: QueryInput,
  result: any,
  fn: (rn: Result, q: Query) => Query
) {
  return cache.updateQuery(qi, (data) => fn(result, data as any) as any);
}
const client = createClient({
  url: "http://localhost:4000/graphql",
  fetchOptions: {
    credentials: "include",
  },
  exchanges: [
    fetchExchange,
    cacheExchange({
      updates: {
        Mutation: {
          logOut: (_result, args, cache) => {
            betterUpdateQuery<LogOutMutation, GetUserQuery>(
              cache,
              { query: GetUserDocument },
              _result,
              () => ({
                getUser: {
                  __typename: "UserResponse",
                  user: null,
                  errors: null,
                },
              })
            );
          },
        },
      },
    }),
  ],
});

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en" suppressHydrationWarning>
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        <UrqlPropvider value={client}>
          <Provider>{children}</Provider>
        </UrqlPropvider>
      </body>
    </html>
  );
}
